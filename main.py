#!/usr/bin/env python3
"""
–ì–ª–∞–≤–Ω—ã–π –∏ –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ Telegram-–±–æ—Ç–∞ –Ω–∞ pyTelegramBotAPI
"""
import re
import telebot
import logging
import sqlite3
from datetime import datetime
from telebot import types
import os
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()


# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è, –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
class Config:
    BOT_TOKEN = "8377401163:AAGcgyx35JH8lOw1Xg5Jvm9slQp0hwPO724"
    CHANNEL_USERNAME = "@Estetika_Kyxni_shkafi"
    ADMIN_ID = [7631971482, 8438177540]
    DATABASE_NAME = "bot_database.db"

    # –°–æ–æ–±—â–µ–Ω–∏—è
    WELCOME_MESSAGE = "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —á–∞—Ç—É –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª."
    SUBSCRIPTION_REQUIRED = "‚ùå –î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –±–æ—Ç—É –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª: {}"
    SUBSCRIPTION_SUCCESS = "–°–ø–∞—Å–∏–±–æ, —á—Ç–æ–±—ã —Å–≤—è–∑–∞—Ç—å—Å—è —Å –¥–∏–∑–∞–π–Ω–µ—Ä–æ–º –æ—Å—Ç–∞–≤—å—Ç–µ –∑–∞—è–≤–∫—É"
    REQUEST_NAME = "üìù –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û:"
    REQUEST_PHONE = "üìû –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:"
    REQUEST_QUERY = "üí¨ –†–∞—Å—Å–∫–∞–∂–∏—Ç–µ, —á–µ–º –º—ã –º–æ–∂–µ–º –≤–∞–º –ø–æ–º–æ—á—å? \n–ö–∞–∫—É—é –º–µ–±–µ–ª—å –ø–æ–¥–±–∏—Ä–∞–µ—Ç–µ? \n–ö—É—Ö–Ω—è, —à–∫–∞—Ñ, –≥–∞—Ä–¥–µ—Ä–æ–±–Ω–∞—è? \n_____________________________________\n\nE—Å—Ç—å –ª–∏ —É –≤–∞—Å —É–∂–µ –ø—Ä–æ–µ–∫—Ç –º–µ–±–µ–ª–∏, –∏–ª–∏ –Ω—É–∂–Ω–æ —Å–ø—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞—Ç—å?"
    DATA_SAVED = "‚úÖ –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã! –° –≤–∞–º–∏ —Å–≤—è–∂—É—Ç—Å—è –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è."
    INFO_MESSAGE = "üìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –Ω–∞—à–µ–º —Å–µ—Ä–≤–∏—Å–µ:\n\n‚Ä¢ –ú—ã –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ–º –ª—É—á—à–∏–µ —É—Å–ª—É–≥–∏\n‚Ä¢ –†–∞–±–æ—Ç–∞–µ–º —Å 9:00 –¥–æ 20:00 –ø–æ –ú–°–ö\n‚Ä¢ –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –±–µ—Å–ø–ª–∞—Ç–Ω–æ\n\nüìû –ö–æ–Ω—Ç–∞–∫—Ç—ã: @Estetika_admi"
    BACK_MESSAGE = "‚Ü©Ô∏è –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
    INVALID_NAME = "‚ùå –§–ò–û –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 2 —Å–ª–æ–≤–∞ (–ò–º—è –∏ –§–∞–º–∏–ª–∏—è)"
    INVALID_PHONE = "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –ü—Ä–∏–º–µ—Ä: +7 (912) 345 67 89"
    PHONE_EXAMPLE = "+7 (000) 000 00 00"
    CHAT_STARTED = "üí¨ –ß–∞—Ç –ø–æ –∑–∞—è–≤–∫–µ #{}\n–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –ø–æ–¥–∫–ª—é—á–∏–ª—Å—è –∫ –¥–∏–∞–ª–æ–≥—É."
    CHAT_MESSAGE_FROM_USER = "üë§ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:"
    CHAT_MESSAGE_FROM_ADMIN = "üë®‚Äçüíº –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:"
    ORDER_NOT_FOUND = "‚ùå –ó–∞—è–≤–∫–∞ —Å –Ω–æ–º–µ—Ä–æ–º {} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
    ORDER_CLOSED = "‚úÖ –ó–∞—è–≤–∫–∞ #{} –∑–∞–∫—Ä—ã—Ç–∞"
    ORDER_REOPENED = "‚úÖ –ó–∞—è–≤–∫–∞ #{} reopened"
    ORDER_DELETED = "‚úÖ –ó–∞—è–≤–∫–∞ #{} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞"
    ORDER_DELETE_CONFIRM = "‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∑–∞—è–≤–∫—É #{}?\n\nüìõ –§–ò–û: {}\nüìû –¢–µ–ª–µ—Ñ–æ–Ω: {}\nüí¨ –ó–∞–ø—Ä–æ—Å: {}"
    ORDER_DELETE_CANCELLED = "‚ùå –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏ #{} –æ—Ç–º–µ–Ω–µ–Ω–æ"
    DELETE_CONFIRM_YES = "‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å"
    DELETE_CONFIRM_NO = "‚ùå –ù–µ—Ç, –æ—Ç–º–µ–Ω–∏—Ç—å"


# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)


# –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
class Database:
    def __init__(self, db_name):
        self.conn = sqlite3.connect(db_name, check_same_thread=False)
        self.create_tables()

    def create_tables(self):
        cursor = self.conn.cursor()

        # –¢–∞–±–ª–∏—Ü–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS users (
                id INTEGER PRIMARY KEY,
                user_id INTEGER UNIQUE,
                username TEXT,
                first_name TEXT,
                last_name TEXT,
                subscribed INTEGER DEFAULT 0,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        ''')

        # –¢–∞–±–ª–∏—Ü–∞ –∑–∞—è–≤–æ–∫
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS applications (
                id INTEGER PRIMARY KEY,
                user_id INTEGER,
                full_name TEXT,
                phone_number TEXT,
                user_query TEXT,
                status TEXT DEFAULT 'new',
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                FOREIGN KEY (user_id) REFERENCES users (user_id)
            )
        ''')

        # –¢–∞–±–ª–∏—Ü–∞ —Å–æ–æ–±—â–µ–Ω–∏–π —á–∞—Ç–∞
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS chat_messages (
                id INTEGER PRIMARY KEY,
                application_id INTEGER,
                user_id INTEGER,
                message TEXT,
                is_admin INTEGER DEFAULT 0,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                FOREIGN KEY (application_id) REFERENCES applications (id),
                FOREIGN KEY (user_id) REFERENCES users (user_id)
            )
        ''')

        self.conn.commit()

    def add_user(self, user_id, username, first_name, last_name):
        try:
            cursor = self.conn.cursor()
            cursor.execute('''
                INSERT OR IGNORE INTO users (user_id, username, first_name, last_name)
                VALUES (?, ?, ?, ?)
            ''', (user_id, username, first_name, last_name))
            self.conn.commit()
            return True
        except Exception as e:
            logger.error(f"Error adding user: {e}")
            return False

    def update_subscription(self, user_id, subscribed):
        cursor = self.conn.cursor()
        cursor.execute('UPDATE users SET subscribed = ? WHERE user_id = ?', (subscribed, user_id))
        self.conn.commit()

    def check_subscription(self, user_id):
        cursor = self.conn.cursor()
        cursor.execute('SELECT subscribed FROM users WHERE user_id = ?', (user_id,))
        result = cursor.fetchone()
        return bool(result[0]) if result else False

    def save_application(self, user_id, full_name, phone_number, user_query):
        try:
            cursor = self.conn.cursor()
            cursor.execute('''
                INSERT INTO applications (user_id, full_name, phone_number, user_query)
                VALUES (?, ?, ?, ?)
            ''', (user_id, full_name, phone_number, user_query))
            self.conn.commit()
            return cursor.lastrowid
        except Exception as e:
            logger.error(f"Error saving application: {e}")
            return False

    def get_all_applications(self):
        cursor = self.conn.cursor()
        cursor.execute('''
            SELECT a.*, u.username, u.first_name, u.last_name
            FROM applications a
            JOIN users u ON a.user_id = u.user_id
            ORDER BY a.created_at DESC
        ''')
        return cursor.fetchall()

    def get_application_by_id(self, application_id):
        cursor = self.conn.cursor()
        cursor.execute('''
            SELECT a.*, u.username, u.first_name, u.last_name
            FROM applications a
            JOIN users u ON a.user_id = u.user_id
            WHERE a.id = ?
        ''', (application_id,))
        return cursor.fetchone()

    def update_application_status(self, application_id, status):
        cursor = self.conn.cursor()
        cursor.execute('UPDATE applications SET status = ? WHERE id = ?', (status, application_id))
        self.conn.commit()

    def delete_application(self, application_id):
        try:
            cursor = self.conn.cursor()
            # –°–Ω–∞—á–∞–ª–∞ —É–¥–∞–ª—è–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è —á–∞—Ç–∞
            cursor.execute('DELETE FROM chat_messages WHERE application_id = ?', (application_id,))
            # –ó–∞—Ç–µ–º —É–¥–∞–ª—è–µ–º –∑–∞—è–≤–∫—É
            cursor.execute('DELETE FROM applications WHERE id = ?', (application_id,))
            self.conn.commit()
            return cursor.rowcount > 0
        except Exception as e:
            logger.error(f"Error deleting application: {e}")
            return False

    def get_all_users(self):
        cursor = self.conn.cursor()
        cursor.execute('SELECT * FROM users ORDER BY created_at DESC')
        return cursor.fetchall()

    def get_user_count(self):
        cursor = self.conn.cursor()
        cursor.execute('SELECT COUNT(*) FROM users')
        return cursor.fetchone()[0]

    def get_application_count(self):
        cursor = self.conn.cursor()
        cursor.execute('SELECT COUNT(*) FROM applications')
        return cursor.fetchone()[0]

    def get_subscribed_users(self):
        cursor = self.conn.cursor()
        cursor.execute('SELECT * FROM users WHERE subscribed = 1 ORDER BY created_at DESC')
        return cursor.fetchall()

    def add_chat_message(self, application_id, user_id, message, is_admin):
        cursor = self.conn.cursor()
        cursor.execute('''
            INSERT INTO chat_messages (application_id, user_id, message, is_admin)
            VALUES (?, ?, ?, ?)
        ''', (application_id, user_id, message, is_admin))
        self.conn.commit()

    def get_chat_messages(self, application_id):
        cursor = self.conn.cursor()
        cursor.execute('''
            SELECT * FROM chat_messages
            WHERE application_id = ?
            ORDER BY created_at ASC
        ''', (application_id,))
        return cursor.fetchall()


# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def get_main_keyboard():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(types.KeyboardButton('üìù –û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É'))
    markup.add(types.KeyboardButton('‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è'))
    return markup


def get_subscription_keyboard(channel_username):
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("üì¢ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª", url=f"https://t.me/{channel_username[1:]}"))
    markup.add(types.InlineKeyboardButton("‚úÖ –Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è", callback_data="check_subscription"))
    return markup


def get_phone_keyboard():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(types.KeyboardButton('üì± –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞', request_contact=True))
    markup.add(types.KeyboardButton('‚Ü©Ô∏è –ù–∞–∑–∞–¥'))
    return markup


def get_back_keyboard():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(types.KeyboardButton('‚Ü©Ô∏è –ù–∞–∑–∞–¥'))
    return markup


def get_admin_keyboard():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(types.KeyboardButton('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞'), types.KeyboardButton('üì® –†–∞—Å—Å—ã–ª–∫–∞'))
    markup.add(types.KeyboardButton('üìã –í—Å–µ –∑–∞—è–≤–∫–∏'), types.KeyboardButton('üë• –í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏'))
    markup.add(types.KeyboardButton('üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –∑–∞—è–≤–∫—É'))
    return markup


def get_info_keyboard():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(types.KeyboardButton('üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã'))
    markup.add(types.KeyboardButton('üíº –£—Å–ª—É–≥–∏'), types.KeyboardButton('‚Ü©Ô∏è –ù–∞–∑–∞–¥'))
    return markup


def get_admin_order_keyboard(application_id):
    markup = types.InlineKeyboardMarkup()
    markup.add(
        types.InlineKeyboardButton("üí¨ –û—Ç–≤–µ—Ç–∏—Ç—å", callback_data=f"chat_{application_id}"),
        types.InlineKeyboardButton("‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å", callback_data=f"close_{application_id}")
    )
    markup.add(
        types.InlineKeyboardButton("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", callback_data=f"delete_{application_id}")
    )
    return markup


def get_chat_keyboard(application_id):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(types.KeyboardButton('‚ùå –ó–∞–≤–µ—Ä—à–∏—Ç—å —á–∞—Ç'))
    markup.add(types.KeyboardButton('üìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞—è–≤–∫–µ'))
    return markup


def get_delete_confirmation_keyboard(application_id):
    markup = types.InlineKeyboardMarkup()
    markup.add(
        types.InlineKeyboardButton(Config.DELETE_CONFIRM_YES, callback_data=f"confirm_delete_{application_id}"),
        types.InlineKeyboardButton(Config.DELETE_CONFIRM_NO, callback_data=f"cancel_delete_{application_id}")
    )
    return markup


# –£—Ç–∏–ª–∏—Ç—ã
def validate_name(full_name):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –§–ò–û - –º–∏–Ω–∏–º—É–º 2 —Å–ª–æ–≤–∞"""
    words = full_name.strip().split()
    return len(words) >= 2


def validate_phone(phone_number):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞"""
    pattern = r'^\+7\s\(\d{3}\)\s\d{3}\s\d{2}\s\d{2}$'
    return re.match(pattern, phone_number) is not None


def format_phone(phone):
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ –Ω—É–∂–Ω—ã–π –≤–∏–¥"""
    digits = re.sub(r'\D', '', phone)

    if digits.startswith('8'):
        digits = '7' + digits[1:]
    elif not digits.startswith('7'):
        digits = '7' + digits

    if len(digits) == 11:
        return f"+7 ({digits[1:4]}) {digits[4:7]} {digits[7:9]} {digits[9:11]}"
    return None


def format_application(application):
    app_id, user_id, full_name, phone_number, user_query, status, created_at, username, first_name, last_name = application
    return f"""
üìã –ó–∞—è–≤–∫–∞ #{app_id}
üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {first_name} {last_name} (@{username})
üìõ –§–ò–û: {full_name}
üìû –¢–µ–ª–µ—Ñ–æ–Ω: {phone_number}
üí¨ –ó–∞–ø—Ä–æ—Å: {user_query}
üïí –î–∞—Ç–∞: {created_at}
üìä –°—Ç–∞—Ç—É—Å: {status}
""".strip()


def format_user(user):
    user_id, tg_user_id, username, first_name, last_name, subscribed, created_at = user
    return f"""
üë§ User ID: {tg_user_id}
üìõ –ò–º—è: {first_name} {last_name}
üì± Username: @{username}
‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞: {'–î–∞' if subscribed else '–ù–µ—Ç'}
üïí –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {created_at}
""".strip()


# –û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å –±–æ—Ç–∞
class TelegramBot:
    def __init__(self):
        self.config = Config()
        self.db = Database(self.config.DATABASE_NAME)
        self.bot = telebot.TeleBot(self.config.BOT_TOKEN)
        self.user_states = {}  # –î–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π

        self.setup_handlers()




def setup_handlers(self):
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    @self.bot.message_handler(func=lambda message: message.text in ['üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã', 'üíº –£—Å–ª—É–≥–∏'])
    def info_buttons_handler(message):
        self.info_buttons_handler(message)

    @self.bot.message_handler(commands=['start'])
    def start_handler(message):
        user = message.from_user

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –≤ –±–∞–∑–µ
        cursor = self.db.conn.cursor()
        cursor.execute('SELECT subscribed FROM users WHERE user_id = ?', (user.id,))
        existing_user = cursor.fetchone()

        # –î–æ–±–∞–≤–ª—è–µ–º/–æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        self.db.add_user(user.id, user.username, user.first_name, user.last_name)

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ (—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ)
        try:
            chat_member = self.bot.get_chat_member(self.config.CHANNEL_USERNAME, user.id)
            is_subscribed = chat_member.status in ['member', 'administrator', 'creator']
        except:
            is_subscribed = False

        if is_subscribed:
            # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É
            self.db.update_subscription(user.id, 1)

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±—ã–ª –Ω–µ–ø–æ–¥–ø–∏—Å–∞–Ω –∏–ª–∏ —ç—Ç–æ –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            if not existing_user or (existing_user and not existing_user[0]):
                for admin_id in self.config.ADMIN_ID:
                    self.bot.send_message(admin_id,f"üéâ –ù–æ–≤—ã–π –ø–æ–¥–ø–∏—Å—á–∏–∫: {user.first_name} {user.last_name} (@{user.username})")

            self.bot.send_message(message.chat.id, self.config.WELCOME_MESSAGE, reply_markup=get_main_keyboard())
        else:
            self.db.update_subscription(user.id, 0)
            self.bot.send_message(
                message.chat.id,
                self.config.SUBSCRIPTION_REQUIRED.format(self.config.CHANNEL_USERNAME),
                reply_markup=get_subscription_keyboard(self.config.CHANNEL_USERNAME)
            )

    @self.bot.message_handler(commands=['admin'])
    def admin_handler(message):
        self.admin_handler(message)

    @self.bot.message_handler(commands=['chat'])
    def chat_command(message):
        self.chat_command(message)

    @self.bot.message_handler(commands=['delete'])
    def delete_command(message):
        self.delete_command(message)

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –∑–∞–ø—Ä–æ—Å–æ–≤
    @self.bot.callback_query_handler(func=lambda call: True)
    def callback_handler(call):
        self.callback_handler(call)

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    @self.bot.message_handler(func=lambda message: message.text == 'üìù –û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É')
    def start_application_handler(message):
        user_id = message.from_user.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É —á–µ—Ä–µ–∑ Telegram API
        try:
            chat_member = self.bot.get_chat_member(self.config.CHANNEL_USERNAME, user_id)
            is_subscribed = chat_member.status in ['member', 'administrator', 'creator']
        except:
            is_subscribed = False
        
        if not is_subscribed:
            self.bot.send_message(
                message.chat.id,
                self.config.SUBSCRIPTION_REQUIRED.format(self.config.CHANNEL_USERNAME),
                reply_markup=get_subscription_keyboard(self.config.CHANNEL_USERNAME)
            )
            return
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏ –≤ –±–∞–∑–µ
        self.db.update_subscription(user_id, 1)
        
        self.user_states[user_id] = {'state': 'NAME'}
        self.bot.send_message(message.chat.id, self.config.REQUEST_NAME, reply_markup=get_back_keyboard())

    @self.bot.message_handler(func=lambda message: message.text == '‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è')
    def info_handler(message):
        self.info_handler(message)

    @self.bot.message_handler(func=lambda message: message.text == '‚Ü©Ô∏è –ù–∞–∑–∞–¥')
    def back_handler(message):
        self.back_handler(message)

    @self.bot.message_handler(
        func=lambda message: message.text in ['üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', 'üìã –í—Å–µ –∑–∞—è–≤–∫–∏', 'üë• –í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏', 'üì® –†–∞—Å—Å—ã–ª–∫–∞',
                                              'üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –∑–∞—è–≤–∫—É'])
    def admin_buttons_handler(message):
        self.admin_buttons_handler(message)

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    @self.bot.message_handler(content_types=['text'])
    def text_message_handler(message):
        user_id = message.from_user.id

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ —á–∞—Ç–∞ –¥–ª—è –∞–¥–º–∏–Ω–∞
        if user_id in self.config.ADMIN_ID and user_id in self.user_states and 'current_chat' in self.user_states[user_id]:
            if message.text == '‚ùå –ó–∞–≤–µ—Ä—à–∏—Ç—å —á–∞—Ç':
                self.end_chat(message)
                return
            elif message.text == 'üìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞—è–≤–∫–µ':
                self.show_application_info(message)
                return

        self.text_message_handler(message)

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤
    @self.bot.message_handler(content_types=['contact'])
    def contact_handler(message):
        self.contact_handler(message)

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ —á–∞—Ç–∞ –¥–ª—è –∞–¥–º–∏–Ω–∞
        if user_id in self.config.ADMIN_ID and user_id in self.user_states and 'current_chat' in self.user_states[user_id]:
            if message.text == '‚ùå –ó–∞–≤–µ—Ä—à–∏—Ç—å —á–∞—Ç':
                self.end_chat(message)
                return
            elif message.text == 'üìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞—è–≤–∫–µ':
                self.show_application_info(message)
                return

        self.text_message_handler(message)

    def back_handler(self, message):
        user_id = message.from_user.id
        if user_id in self.user_states:
            del self.user_states[user_id]

        self.bot.send_message(
            message.chat.id,
            self.config.BACK_MESSAGE,
            reply_markup=get_main_keyboard()
        )

    def admin_buttons_handler(self, message):
        if message.from_user.id not in self.config.ADMIN_ID:
            return

        if message.text == 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞':
            self.stats_handler(message)
        elif message.text == 'üìã –í—Å–µ –∑–∞—è–≤–∫–∏':
            self.applications_handler(message)
        elif message.text == 'üë• –í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏':
            self.users_handler(message)
        elif message.text == 'üì® –†–∞—Å—Å—ã–ª–∫–∞':
            self.broadcast_handler(message)
        elif message.text == 'üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –∑–∞—è–≤–∫—É':
            self.delete_handler(message)

    def stats_handler(self, message):
        user_count = self.db.get_user_count()
        app_count = self.db.get_application_count()
        self.bot.send_message(message.chat.id, f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n\nüë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {user_count}\nüìã –ó–∞—è–≤–æ–∫: {app_count}")

    def applications_handler(self, message):
        applications = self.db.get_all_applications()
        if not applications:
            self.bot.send_message(message.chat.id, "üì≠ –ó–∞—è–≤–æ–∫ –ø–æ–∫–∞ –Ω–µ—Ç")
            return

        for app in applications:
            self.bot.send_message(message.chat.id, format_application(app))

    def users_handler(self, message):
        users = self.db.get_all_users()
        if not users:
            self.bot.send_message(message.chat.id, "üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ–∫–∞ –Ω–µ—Ç")
            return

        for user in users:
            self.bot.send_message(message.chat.id, format_user(user))

    def broadcast_handler(self, message):
        self.user_states[message.from_user.id] = {'awaiting_broadcast': True}
        self.bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:",
                              reply_markup=types.ReplyKeyboardRemove())

    def delete_handler(self, message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞—è–≤–∫–∏"""
        self.user_states[message.from_user.id] = {'awaiting_delete': True}
        self.bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞—è–≤–∫–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:")

    def delete_command(self, message):
        """–ö–æ–º–∞–Ω–¥–∞ /delete –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∑–∞—è–≤–∫–∏"""
        if message.from_user.id not in self.config.ADMIN_ID:
            self.bot.send_message(message.chat.id, "‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
            return

        if not message.text.split():
            self.bot.send_message(message.chat.id, "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /delete <–Ω–æ–º–µ—Ä_–∑–∞—è–≤–∫–∏>")
            return

        try:
            application_id = int(message.text.split()[1])
            application = self.db.get_application_by_id(application_id)

            if not application:
                self.bot.send_message(message.chat.id, self.config.ORDER_NOT_FOUND.format(application_id))
                return

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è
            app_id, user_id, full_name, phone_number, user_query, status, created_at, username, first_name, last_name = application
            self.bot.send_message(
                message.chat.id,
                self.config.ORDER_DELETE_CONFIRM.format(application_id, full_name, phone_number, user_query),
                reply_markup=get_delete_confirmation_keyboard(application_id)
            )

        except (ValueError, IndexError):
            self.bot.send_message(message.chat.id, "–ù–æ–º–µ—Ä –∑–∞—è–≤–∫–∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º")

    def text_message_handler(self, message):
        user_id = message.from_user.id

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ–∂–∏–¥–∞–µ–º –ª–∏ –º—ã —Ä–∞—Å—Å—ã–ª–∫—É –æ—Ç –∞–¥–º–∏–Ω–∞
        if user_id in self.config.ADMIN_ID and self.user_states.get(user_id, {}).get('awaiting_broadcast'):
            self.process_broadcast(message)
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ–∂–∏–¥–∞–µ–º –ª–∏ –º—ã –Ω–æ–º–µ—Ä –∑–∞—è–≤–∫–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
        if user_id in self.config.ADMIN_ID and self.user_states.get(user_id, {}).get('awaiting_delete'):
            self.process_delete_request(message)
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_state = self.user_states.get(user_id, {}).get('state')

        if user_state == 'NAME':
            self.get_name(message)
        elif user_state == 'PHONE':
            self.get_phone(message)
        elif user_state == 'QUERY':
            self.get_query(message)
        elif user_id in self.user_states and 'current_chat' in self.user_states[user_id]:
            self.process_chat_message(message)

    def process_delete_request(self, message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –Ω–æ–º–µ—Ä–∞ –∑–∞—è–≤–∫–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è"""
        user_id = message.from_user.id
        try:
            application_id = int(message.text)
            application = self.db.get_application_by_id(application_id)

            if not application:
                self.bot.send_message(message.chat.id, self.config.ORDER_NOT_FOUND.format(application_id))
                return

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è
            app_id, user_id, full_name, phone_number, user_query, status, created_at, username, first_name, last_name = application
            self.bot.send_message(
                message.chat.id,
                self.config.ORDER_DELETE_CONFIRM.format(application_id, full_name, phone_number, user_query),
                reply_markup=get_delete_confirmation_keyboard(application_id)
            )

            # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            if user_id in self.user_states and 'awaiting_delete' in self.user_states[user_id]:
                del self.user_states[user_id]['awaiting_delete']

        except ValueError:
            self.bot.send_message(message.chat.id, "–ù–æ–º–µ—Ä –∑–∞—è–≤–∫–∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º")

    def contact_handler(self, message):
        user_id = message.from_user.id
        user_state = self.user_states.get(user_id, {}).get('state')

        if user_state == 'PHONE':
            self.get_phone(message, is_contact=True)

    def process_broadcast(self, message):
        user_id = message.from_user.id
        broadcast_message = message.text
        users = self.db.get_subscribed_users()

        success_count = 0
        for user in users:
            try:
                self.bot.send_message(user[1], broadcast_message)  # user[1] = user_id
                success_count += 1
            except Exception as e:
                logger.error(f"Error sending broadcast to user {user[1]}: {e}")

        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        if user_id in self.user_states and 'awaiting_broadcast' in self.user_states[user_id]:
            del self.user_states[user_id]['awaiting_broadcast']

        self.bot.send_message(
            message.chat.id,
            f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞\n–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {success_count}/{len(users)}",
            reply_markup=get_admin_keyboard()
        )

    def chat_command(self, message):
        if message.from_user.id not in self.config.ADMIN_ID:
            return

        if not message.text.split():
            self.bot.send_message(message.chat.id, "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /chat <–Ω–æ–º–µ—Ä_–∑–∞—è–≤–∫–∏>")
            return

        try:
            application_id = int(message.text.split()[1])
            application = self.db.get_application_by_id(application_id)

            if not application:
                self.bot.send_message(message.chat.id, self.config.ORDER_NOT_FOUND.format(application_id))
                return

            self.user_states[message.from_user.id] = {'current_chat': application_id}
            self.bot.send_message(
                message.chat.id,
                self.config.CHAT_STARTED.format(application_id),
                reply_markup=get_chat_keyboard(application_id)
            )

        except (ValueError, IndexError):
            self.bot.send_message(message.chat.id, "–ù–æ–º–µ—Ä –∑–∞—è–≤–∫–∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º")

    def process_chat_message(self, message):
        user_id = message.from_user.id

        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–ª—É–∂–µ–±–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã —á–∞—Ç–∞
        if message.text in ['‚ùå –ó–∞–≤–µ—Ä—à–∏—Ç—å —á–∞—Ç', 'üìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞—è–≤–∫–µ']:
            return

        message_text = message.text
        application_id = self.user_states[user_id]['current_chat']
        is_admin = (user_id in self.config.ADMIN_ID)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        self.db.add_chat_message(application_id, user_id, message_text, is_admin)

        # –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        application = self.db.get_application_by_id(application_id)
        if application:
            target_id = self.config.ADMIN_ID if not is_admin else application[1]  # application[1] = user_id

            prefix = self.config.CHAT_MESSAGE_FROM_ADMIN if is_admin else self.config.CHAT_MESSAGE_FROM_USER
            self.bot.send_message(
                target_id,
                f"{prefix}\n{message_text}\n\n(–ó–∞—è–≤–∫–∞ #{application_id})",
                reply_markup=get_chat_keyboard(application_id) if not is_admin else None
            )

    def admin_order_callback(self, call):
        user_id = call.from_user.id
        data = call.data

        if user_id not in self.config.ADMIN_ID:
            self.bot.answer_callback_query(call.id, "‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
            return

        if data.startswith('chat_'):
            application_id = int(data.split('_')[1])
            self.user_states[user_id] = {'current_chat': application_id}

            # –í–º–µ—Å—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
            self.bot.send_message(
                call.message.chat.id,
                self.config.CHAT_STARTED.format(application_id),
                reply_markup=get_chat_keyboard(application_id)
            )
            self.bot.answer_callback_query(call.id)  # –ó–∞–∫—Ä—ã–≤–∞–µ–º callback

        elif data.startswith('close_'):
            application_id = int(data.split('_')[1])
            self.db.update_application_status(application_id, 'closed')
            self.bot.edit_message_text(
                self.config.ORDER_CLOSED.format(application_id),
                call.message.chat.id,
                call.message.message_id,
                reply_markup=None  # –£–±–∏—Ä–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏
            )

        elif data.startswith('details_'):
            application_id = int(data.split('_')[1])
            application = self.db.get_application_by_id(application_id)
            if application:
                self.bot.edit_message_text(
                    format_application(application),
                    call.message.chat.id,
                    call.message.message_id,
                    reply_markup=get_admin_order_keyboard(application_id)  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç—É –∂–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
                )

        elif data.startswith('delete_'):
            application_id = int(data.split('_')[1])
            application = self.db.get_application_by_id(application_id)
            if application:
                app_id, user_id, full_name, phone_number, user_query, status, created_at, username, first_name, last_name = application
                self.bot.edit_message_text(
                    self.config.ORDER_DELETE_CONFIRM.format(application_id, full_name, phone_number, user_query),
                    call.message.chat.id,
                    call.message.message_id,
                    reply_markup=get_delete_confirmation_keyboard(application_id)
                )

        elif data.startswith('confirm_delete_'):
            application_id = int(data.split('_')[2])
            if self.db.delete_application(application_id):
                self.bot.edit_message_text(
                    self.config.ORDER_DELETED.format(application_id),
                    call.message.chat.id,
                    call.message.message_id,
                    reply_markup=None  # –£–±–∏—Ä–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è
                )
            else:
                self.bot.answer_callback_query(call.id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏")

        elif data.startswith('cancel_delete_'):
            application_id = int(data.split('_')[2])
            application = self.db.get_application_by_id(application_id)
            if application:
                self.bot.edit_message_text(
                    format_application(application),
                    call.message.chat.id,
                    call.message.message_id,
                    reply_markup=get_admin_order_keyboard(application_id)
                )

    def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
        self.bot.infinity_polling()


# –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞
if __name__ == "__main__":
    bot = TelegramBot()
    bot.run()

